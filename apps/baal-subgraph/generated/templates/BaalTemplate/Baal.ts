// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AvatarSet extends ethereum.Event {
  get params(): AvatarSet__Params {
    return new AvatarSet__Params(this);
  }
}

export class AvatarSet__Params {
  _event: AvatarSet;

  constructor(event: AvatarSet) {
    this._event = event;
  }

  get previousAvatar(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAvatar(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CancelProposal extends ethereum.Event {
  get params(): CancelProposal__Params {
    return new CancelProposal__Params(this);
  }
}

export class CancelProposal__Params {
  _event: CancelProposal;

  constructor(event: CancelProposal) {
    this._event = event;
  }

  get proposal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ChangedGuard extends ethereum.Event {
  get params(): ChangedGuard__Params {
    return new ChangedGuard__Params(this);
  }
}

export class ChangedGuard__Params {
  _event: ChangedGuard;

  constructor(event: ChangedGuard) {
    this._event = event;
  }

  get guard(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DelegateChanged extends ethereum.Event {
  get params(): DelegateChanged__Params {
    return new DelegateChanged__Params(this);
  }
}

export class DelegateChanged__Params {
  _event: DelegateChanged;

  constructor(event: DelegateChanged) {
    this._event = event;
  }

  get delegator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromDelegate(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get toDelegate(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DelegateVotesChanged extends ethereum.Event {
  get params(): DelegateVotesChanged__Params {
    return new DelegateVotesChanged__Params(this);
  }
}

export class DelegateVotesChanged__Params {
  _event: DelegateVotesChanged;

  constructor(event: DelegateVotesChanged) {
    this._event = event;
  }

  get delegate(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get previousBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GovernanceConfigSet extends ethereum.Event {
  get params(): GovernanceConfigSet__Params {
    return new GovernanceConfigSet__Params(this);
  }
}

export class GovernanceConfigSet__Params {
  _event: GovernanceConfigSet;

  constructor(event: GovernanceConfigSet) {
    this._event = event;
  }

  get voting(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get grace(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newOffering(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get quorum(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get sponsor(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get minRetention(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class LootPaused extends ethereum.Event {
  get params(): LootPaused__Params {
    return new LootPaused__Params(this);
  }
}

export class LootPaused__Params {
  _event: LootPaused;

  constructor(event: LootPaused) {
    this._event = event;
  }

  get paused(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProcessProposal extends ethereum.Event {
  get params(): ProcessProposal__Params {
    return new ProcessProposal__Params(this);
  }
}

export class ProcessProposal__Params {
  _event: ProcessProposal;

  constructor(event: ProcessProposal) {
    this._event = event;
  }

  get proposal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get passed(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get actionFailed(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ProcessingFailed extends ethereum.Event {
  get params(): ProcessingFailed__Params {
    return new ProcessingFailed__Params(this);
  }
}

export class ProcessingFailed__Params {
  _event: ProcessingFailed;

  constructor(event: ProcessingFailed) {
    this._event = event;
  }

  get proposal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Ragequit extends ethereum.Event {
  get params(): Ragequit__Params {
    return new Ragequit__Params(this);
  }
}

export class Ragequit__Params {
  _event: Ragequit;

  constructor(event: Ragequit) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get lootToBurn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sharesToBurn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokens(): Array<Address> {
    return this._event.parameters[4].value.toAddressArray();
  }
}

export class SetupComplete extends ethereum.Event {
  get params(): SetupComplete__Params {
    return new SetupComplete__Params(this);
  }
}

export class SetupComplete__Params {
  _event: SetupComplete;

  constructor(event: SetupComplete) {
    this._event = event;
  }

  get lootPaused(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get sharesPaused(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get gracePeriod(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get votingPeriod(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get proposalOffering(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get quorumPercent(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get sponsorThreshold(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get minRetentionPercent(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[8].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[9].value.toString();
  }

  get totalShares(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }

  get totalLoot(): BigInt {
    return this._event.parameters[11].value.toBigInt();
  }
}

export class ShamanSet extends ethereum.Event {
  get params(): ShamanSet__Params {
    return new ShamanSet__Params(this);
  }
}

export class ShamanSet__Params {
  _event: ShamanSet;

  constructor(event: ShamanSet) {
    this._event = event;
  }

  get shaman(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get permission(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SharesPaused extends ethereum.Event {
  get params(): SharesPaused__Params {
    return new SharesPaused__Params(this);
  }
}

export class SharesPaused__Params {
  _event: SharesPaused;

  constructor(event: SharesPaused) {
    this._event = event;
  }

  get paused(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class SponsorProposal extends ethereum.Event {
  get params(): SponsorProposal__Params {
    return new SponsorProposal__Params(this);
  }
}

export class SponsorProposal__Params {
  _event: SponsorProposal;

  constructor(event: SponsorProposal) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get votingStarts(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SubmitProposal extends ethereum.Event {
  get params(): SubmitProposal__Params {
    return new SubmitProposal__Params(this);
  }
}

export class SubmitProposal__Params {
  _event: SubmitProposal;

  constructor(event: SubmitProposal) {
    this._event = event;
  }

  get proposal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposalDataHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get votingPeriod(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get proposalData(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get expiration(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get selfSponsor(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }

  get timestamp(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get details(): string {
    return this._event.parameters[7].value.toString();
  }
}

export class SubmitVote extends ethereum.Event {
  get params(): SubmitVote__Params {
    return new SubmitVote__Params(this);
  }
}

export class SubmitVote__Params {
  _event: SubmitVote;

  constructor(event: SubmitVote) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get balance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get proposal(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get approved(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class TargetSet extends ethereum.Event {
  get params(): TargetSet__Params {
    return new TargetSet__Params(this);
  }
}

export class TargetSet__Params {
  _event: TargetSet;

  constructor(event: TargetSet) {
    this._event = event;
  }

  get previousTarget(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newTarget(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferLoot extends ethereum.Event {
  get params(): TransferLoot__Params {
    return new TransferLoot__Params(this);
  }
}

export class TransferLoot__Params {
  _event: TransferLoot;

  constructor(event: TransferLoot) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Baal__checkpointsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Baal__proposalsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: Address;
  value10: Bytes;
  value11: string;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: Address,
    value10: Bytes,
    value11: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromAddress(this.value9));
    map.set("value10", ethereum.Value.fromFixedBytes(this.value10));
    map.set("value11", ethereum.Value.fromString(this.value11));
    return map;
  }
}

export class Baal extends ethereum.SmartContract {
  static bind(address: Address): Baal {
    return new Baal("Baal", address);
  }

  adminLock(): boolean {
    let result = super.call("adminLock", "adminLock():(bool)", []);

    return result[0].toBoolean();
  }

  try_adminLock(): ethereum.CallResult<boolean> {
    let result = super.tryCall("adminLock", "adminLock():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allowance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_allowance(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(to: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  avatar(): Address {
    let result = super.call("avatar", "avatar():(address)", []);

    return result[0].toAddress();
  }

  try_avatar(): ethereum.CallResult<Address> {
    let result = super.tryCall("avatar", "avatar():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(param0: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkpoints(param0: Address, param1: BigInt): Baal__checkpointsResult {
    let result = super.call(
      "checkpoints",
      "checkpoints(address,uint256):(uint32,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Baal__checkpointsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_checkpoints(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Baal__checkpointsResult> {
    let result = super.tryCall(
      "checkpoints",
      "checkpoints(address,uint256):(uint32,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Baal__checkpointsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  delegates(param0: Address): Address {
    let result = super.call("delegates", "delegates(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_delegates(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("delegates", "delegates(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentVotes(account: Address): BigInt {
    let result = super.call(
      "getCurrentVotes",
      "getCurrentVotes(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getCurrentVotes(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentVotes",
      "getCurrentVotes(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getGuard(): Address {
    let result = super.call("getGuard", "getGuard():(address)", []);

    return result[0].toAddress();
  }

  try_getGuard(): ethereum.CallResult<Address> {
    let result = super.tryCall("getGuard", "getGuard():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPriorVotes(account: Address, timeStamp: BigInt): BigInt {
    let result = super.call(
      "getPriorVotes",
      "getPriorVotes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timeStamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPriorVotes(
    account: Address,
    timeStamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPriorVotes",
      "getPriorVotes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timeStamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProposalStatus(id: BigInt): Array<boolean> {
    let result = super.call(
      "getProposalStatus",
      "getProposalStatus(uint32):(bool[4])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBooleanArray();
  }

  try_getProposalStatus(id: BigInt): ethereum.CallResult<Array<boolean>> {
    let result = super.tryCall(
      "getProposalStatus",
      "getProposalStatus(uint32):(bool[4])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBooleanArray());
  }

  governorLock(): boolean {
    let result = super.call("governorLock", "governorLock():(bool)", []);

    return result[0].toBoolean();
  }

  try_governorLock(): ethereum.CallResult<boolean> {
    let result = super.tryCall("governorLock", "governorLock():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  gracePeriod(): BigInt {
    let result = super.call("gracePeriod", "gracePeriod():(uint32)", []);

    return result[0].toBigInt();
  }

  try_gracePeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("gracePeriod", "gracePeriod():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  guard(): Address {
    let result = super.call("guard", "guard():(address)", []);

    return result[0].toAddress();
  }

  try_guard(): ethereum.CallResult<Address> {
    let result = super.tryCall("guard", "guard():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hashOperation(_transactions: Bytes): Bytes {
    let result = super.call("hashOperation", "hashOperation(bytes):(bytes32)", [
      ethereum.Value.fromBytes(_transactions)
    ]);

    return result[0].toBytes();
  }

  try_hashOperation(_transactions: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashOperation",
      "hashOperation(bytes):(bytes32)",
      [ethereum.Value.fromBytes(_transactions)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isAdmin(shaman: Address): boolean {
    let result = super.call("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(shaman)
    ]);

    return result[0].toBoolean();
  }

  try_isAdmin(shaman: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(shaman)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isGovernor(shaman: Address): boolean {
    let result = super.call("isGovernor", "isGovernor(address):(bool)", [
      ethereum.Value.fromAddress(shaman)
    ]);

    return result[0].toBoolean();
  }

  try_isGovernor(shaman: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isGovernor", "isGovernor(address):(bool)", [
      ethereum.Value.fromAddress(shaman)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isManager(shaman: Address): boolean {
    let result = super.call("isManager", "isManager(address):(bool)", [
      ethereum.Value.fromAddress(shaman)
    ]);

    return result[0].toBoolean();
  }

  try_isManager(shaman: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isManager", "isManager(address):(bool)", [
      ethereum.Value.fromAddress(shaman)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  latestSponsoredProposalId(): BigInt {
    let result = super.call(
      "latestSponsoredProposalId",
      "latestSponsoredProposalId():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_latestSponsoredProposalId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "latestSponsoredProposalId",
      "latestSponsoredProposalId():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lootPaused(): boolean {
    let result = super.call("lootPaused", "lootPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_lootPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("lootPaused", "lootPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lootToken(): Address {
    let result = super.call("lootToken", "lootToken():(address)", []);

    return result[0].toAddress();
  }

  try_lootToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("lootToken", "lootToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  managerLock(): boolean {
    let result = super.call("managerLock", "managerLock():(bool)", []);

    return result[0].toBoolean();
  }

  try_managerLock(): ethereum.CallResult<boolean> {
    let result = super.tryCall("managerLock", "managerLock():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  memberVoted(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "memberVoted",
      "memberVoted(address,uint32):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_memberVoted(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "memberVoted",
      "memberVoted(address,uint32):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minRetentionPercent(): BigInt {
    let result = super.call(
      "minRetentionPercent",
      "minRetentionPercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minRetentionPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minRetentionPercent",
      "minRetentionPercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numCheckpoints(param0: Address): BigInt {
    let result = super.call(
      "numCheckpoints",
      "numCheckpoints(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_numCheckpoints(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numCheckpoints",
      "numCheckpoints(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proposalCount(): BigInt {
    let result = super.call("proposalCount", "proposalCount():(uint32)", []);

    return result[0].toBigInt();
  }

  try_proposalCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("proposalCount", "proposalCount():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalOffering(): BigInt {
    let result = super.call(
      "proposalOffering",
      "proposalOffering():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_proposalOffering(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalOffering",
      "proposalOffering():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposals(param0: BigInt): Baal__proposalsResult {
    let result = super.call(
      "proposals",
      "proposals(uint256):(uint32,uint32,uint32,uint32,uint32,uint32,uint256,uint256,uint256,address,bytes32,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Baal__proposalsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toAddress(),
      result[10].toBytes(),
      result[11].toString()
    );
  }

  try_proposals(param0: BigInt): ethereum.CallResult<Baal__proposalsResult> {
    let result = super.tryCall(
      "proposals",
      "proposals(uint256):(uint32,uint32,uint32,uint32,uint32,uint32,uint256,uint256,uint256,address,bytes32,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Baal__proposalsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toAddress(),
        value[10].toBytes(),
        value[11].toString()
      )
    );
  }

  quorumPercent(): BigInt {
    let result = super.call("quorumPercent", "quorumPercent():(uint256)", []);

    return result[0].toBigInt();
  }

  try_quorumPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "quorumPercent",
      "quorumPercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shamans(param0: Address): BigInt {
    let result = super.call("shamans", "shamans(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_shamans(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("shamans", "shamans(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sharesPaused(): boolean {
    let result = super.call("sharesPaused", "sharesPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_sharesPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("sharesPaused", "sharesPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  sponsorThreshold(): BigInt {
    let result = super.call(
      "sponsorThreshold",
      "sponsorThreshold():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_sponsorThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sponsorThreshold",
      "sponsorThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  state(id: BigInt): i32 {
    let result = super.call("state", "state(uint32):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toI32();
  }

  try_state(id: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("state", "state(uint32):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  target(): Address {
    let result = super.call("target", "target():(address)", []);

    return result[0].toAddress();
  }

  try_target(): ethereum.CallResult<Address> {
    let result = super.tryCall("target", "target():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalLoot(): BigInt {
    let result = super.call("totalLoot", "totalLoot():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalLoot(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalLoot", "totalLoot():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  votingPeriod(): BigInt {
    let result = super.call("votingPeriod", "votingPeriod():(uint32)", []);

    return result[0].toBigInt();
  }

  try_votingPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("votingPeriod", "votingPeriod():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnLootCall extends ethereum.Call {
  get inputs(): BurnLootCall__Inputs {
    return new BurnLootCall__Inputs(this);
  }

  get outputs(): BurnLootCall__Outputs {
    return new BurnLootCall__Outputs(this);
  }
}

export class BurnLootCall__Inputs {
  _call: BurnLootCall;

  constructor(call: BurnLootCall) {
    this._call = call;
  }

  get from(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amount(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class BurnLootCall__Outputs {
  _call: BurnLootCall;

  constructor(call: BurnLootCall) {
    this._call = call;
  }
}

export class BurnSharesCall extends ethereum.Call {
  get inputs(): BurnSharesCall__Inputs {
    return new BurnSharesCall__Inputs(this);
  }

  get outputs(): BurnSharesCall__Outputs {
    return new BurnSharesCall__Outputs(this);
  }
}

export class BurnSharesCall__Inputs {
  _call: BurnSharesCall;

  constructor(call: BurnSharesCall) {
    this._call = call;
  }

  get from(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amount(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class BurnSharesCall__Outputs {
  _call: BurnSharesCall;

  constructor(call: BurnSharesCall) {
    this._call = call;
  }
}

export class CancelProposalCall extends ethereum.Call {
  get inputs(): CancelProposalCall__Inputs {
    return new CancelProposalCall__Inputs(this);
  }

  get outputs(): CancelProposalCall__Outputs {
    return new CancelProposalCall__Outputs(this);
  }
}

export class CancelProposalCall__Inputs {
  _call: CancelProposalCall;

  constructor(call: CancelProposalCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelProposalCall__Outputs {
  _call: CancelProposalCall;

  constructor(call: CancelProposalCall) {
    this._call = call;
  }
}

export class DelegateCall extends ethereum.Call {
  get inputs(): DelegateCall__Inputs {
    return new DelegateCall__Inputs(this);
  }

  get outputs(): DelegateCall__Outputs {
    return new DelegateCall__Outputs(this);
  }
}

export class DelegateCall__Inputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DelegateCall__Outputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }
}

export class DelegateBySigCall extends ethereum.Call {
  get inputs(): DelegateBySigCall__Inputs {
    return new DelegateBySigCall__Inputs(this);
  }

  get outputs(): DelegateBySigCall__Outputs {
    return new DelegateBySigCall__Outputs(this);
  }
}

export class DelegateBySigCall__Inputs {
  _call: DelegateBySigCall;

  constructor(call: DelegateBySigCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class DelegateBySigCall__Outputs {
  _call: DelegateBySigCall;

  constructor(call: DelegateBySigCall) {
    this._call = call;
  }
}

export class ExecuteAsBaalCall extends ethereum.Call {
  get inputs(): ExecuteAsBaalCall__Inputs {
    return new ExecuteAsBaalCall__Inputs(this);
  }

  get outputs(): ExecuteAsBaalCall__Outputs {
    return new ExecuteAsBaalCall__Outputs(this);
  }
}

export class ExecuteAsBaalCall__Inputs {
  _call: ExecuteAsBaalCall;

  constructor(call: ExecuteAsBaalCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ExecuteAsBaalCall__Outputs {
  _call: ExecuteAsBaalCall;

  constructor(call: ExecuteAsBaalCall) {
    this._call = call;
  }
}

export class LockAdminCall extends ethereum.Call {
  get inputs(): LockAdminCall__Inputs {
    return new LockAdminCall__Inputs(this);
  }

  get outputs(): LockAdminCall__Outputs {
    return new LockAdminCall__Outputs(this);
  }
}

export class LockAdminCall__Inputs {
  _call: LockAdminCall;

  constructor(call: LockAdminCall) {
    this._call = call;
  }
}

export class LockAdminCall__Outputs {
  _call: LockAdminCall;

  constructor(call: LockAdminCall) {
    this._call = call;
  }
}

export class LockGovernorCall extends ethereum.Call {
  get inputs(): LockGovernorCall__Inputs {
    return new LockGovernorCall__Inputs(this);
  }

  get outputs(): LockGovernorCall__Outputs {
    return new LockGovernorCall__Outputs(this);
  }
}

export class LockGovernorCall__Inputs {
  _call: LockGovernorCall;

  constructor(call: LockGovernorCall) {
    this._call = call;
  }
}

export class LockGovernorCall__Outputs {
  _call: LockGovernorCall;

  constructor(call: LockGovernorCall) {
    this._call = call;
  }
}

export class LockManagerCall extends ethereum.Call {
  get inputs(): LockManagerCall__Inputs {
    return new LockManagerCall__Inputs(this);
  }

  get outputs(): LockManagerCall__Outputs {
    return new LockManagerCall__Outputs(this);
  }
}

export class LockManagerCall__Inputs {
  _call: LockManagerCall;

  constructor(call: LockManagerCall) {
    this._call = call;
  }
}

export class LockManagerCall__Outputs {
  _call: LockManagerCall;

  constructor(call: LockManagerCall) {
    this._call = call;
  }
}

export class MintLootCall extends ethereum.Call {
  get inputs(): MintLootCall__Inputs {
    return new MintLootCall__Inputs(this);
  }

  get outputs(): MintLootCall__Outputs {
    return new MintLootCall__Outputs(this);
  }
}

export class MintLootCall__Inputs {
  _call: MintLootCall;

  constructor(call: MintLootCall) {
    this._call = call;
  }

  get to(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amount(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class MintLootCall__Outputs {
  _call: MintLootCall;

  constructor(call: MintLootCall) {
    this._call = call;
  }
}

export class MintSharesCall extends ethereum.Call {
  get inputs(): MintSharesCall__Inputs {
    return new MintSharesCall__Inputs(this);
  }

  get outputs(): MintSharesCall__Outputs {
    return new MintSharesCall__Outputs(this);
  }
}

export class MintSharesCall__Inputs {
  _call: MintSharesCall;

  constructor(call: MintSharesCall) {
    this._call = call;
  }

  get to(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amount(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class MintSharesCall__Outputs {
  _call: MintSharesCall;

  constructor(call: MintSharesCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class ProcessProposalCall extends ethereum.Call {
  get inputs(): ProcessProposalCall__Inputs {
    return new ProcessProposalCall__Inputs(this);
  }

  get outputs(): ProcessProposalCall__Outputs {
    return new ProcessProposalCall__Outputs(this);
  }
}

export class ProcessProposalCall__Inputs {
  _call: ProcessProposalCall;

  constructor(call: ProcessProposalCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get proposalData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ProcessProposalCall__Outputs {
  _call: ProcessProposalCall;

  constructor(call: ProcessProposalCall) {
    this._call = call;
  }
}

export class RagequitCall extends ethereum.Call {
  get inputs(): RagequitCall__Inputs {
    return new RagequitCall__Inputs(this);
  }

  get outputs(): RagequitCall__Outputs {
    return new RagequitCall__Outputs(this);
  }
}

export class RagequitCall__Inputs {
  _call: RagequitCall;

  constructor(call: RagequitCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get sharesToBurn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get lootToBurn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }
}

export class RagequitCall__Outputs {
  _call: RagequitCall;

  constructor(call: RagequitCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAdminConfigCall extends ethereum.Call {
  get inputs(): SetAdminConfigCall__Inputs {
    return new SetAdminConfigCall__Inputs(this);
  }

  get outputs(): SetAdminConfigCall__Outputs {
    return new SetAdminConfigCall__Outputs(this);
  }
}

export class SetAdminConfigCall__Inputs {
  _call: SetAdminConfigCall;

  constructor(call: SetAdminConfigCall) {
    this._call = call;
  }

  get pauseShares(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get pauseLoot(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetAdminConfigCall__Outputs {
  _call: SetAdminConfigCall;

  constructor(call: SetAdminConfigCall) {
    this._call = call;
  }
}

export class SetAvatarCall extends ethereum.Call {
  get inputs(): SetAvatarCall__Inputs {
    return new SetAvatarCall__Inputs(this);
  }

  get outputs(): SetAvatarCall__Outputs {
    return new SetAvatarCall__Outputs(this);
  }
}

export class SetAvatarCall__Inputs {
  _call: SetAvatarCall;

  constructor(call: SetAvatarCall) {
    this._call = call;
  }

  get _avatar(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAvatarCall__Outputs {
  _call: SetAvatarCall;

  constructor(call: SetAvatarCall) {
    this._call = call;
  }
}

export class SetGovernanceConfigCall extends ethereum.Call {
  get inputs(): SetGovernanceConfigCall__Inputs {
    return new SetGovernanceConfigCall__Inputs(this);
  }

  get outputs(): SetGovernanceConfigCall__Outputs {
    return new SetGovernanceConfigCall__Outputs(this);
  }
}

export class SetGovernanceConfigCall__Inputs {
  _call: SetGovernanceConfigCall;

  constructor(call: SetGovernanceConfigCall) {
    this._call = call;
  }

  get _governanceConfig(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetGovernanceConfigCall__Outputs {
  _call: SetGovernanceConfigCall;

  constructor(call: SetGovernanceConfigCall) {
    this._call = call;
  }
}

export class SetGuardCall extends ethereum.Call {
  get inputs(): SetGuardCall__Inputs {
    return new SetGuardCall__Inputs(this);
  }

  get outputs(): SetGuardCall__Outputs {
    return new SetGuardCall__Outputs(this);
  }
}

export class SetGuardCall__Inputs {
  _call: SetGuardCall;

  constructor(call: SetGuardCall) {
    this._call = call;
  }

  get _guard(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGuardCall__Outputs {
  _call: SetGuardCall;

  constructor(call: SetGuardCall) {
    this._call = call;
  }
}

export class SetShamansCall extends ethereum.Call {
  get inputs(): SetShamansCall__Inputs {
    return new SetShamansCall__Inputs(this);
  }

  get outputs(): SetShamansCall__Outputs {
    return new SetShamansCall__Outputs(this);
  }
}

export class SetShamansCall__Inputs {
  _call: SetShamansCall;

  constructor(call: SetShamansCall) {
    this._call = call;
  }

  get _shamans(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _permissions(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class SetShamansCall__Outputs {
  _call: SetShamansCall;

  constructor(call: SetShamansCall) {
    this._call = call;
  }
}

export class SetTargetCall extends ethereum.Call {
  get inputs(): SetTargetCall__Inputs {
    return new SetTargetCall__Inputs(this);
  }

  get outputs(): SetTargetCall__Outputs {
    return new SetTargetCall__Outputs(this);
  }
}

export class SetTargetCall__Inputs {
  _call: SetTargetCall;

  constructor(call: SetTargetCall) {
    this._call = call;
  }

  get _target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTargetCall__Outputs {
  _call: SetTargetCall;

  constructor(call: SetTargetCall) {
    this._call = call;
  }
}

export class SetUpCall extends ethereum.Call {
  get inputs(): SetUpCall__Inputs {
    return new SetUpCall__Inputs(this);
  }

  get outputs(): SetUpCall__Outputs {
    return new SetUpCall__Outputs(this);
  }
}

export class SetUpCall__Inputs {
  _call: SetUpCall;

  constructor(call: SetUpCall) {
    this._call = call;
  }

  get _initializationParams(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetUpCall__Outputs {
  _call: SetUpCall;

  constructor(call: SetUpCall) {
    this._call = call;
  }
}

export class SponsorProposalCall extends ethereum.Call {
  get inputs(): SponsorProposalCall__Inputs {
    return new SponsorProposalCall__Inputs(this);
  }

  get outputs(): SponsorProposalCall__Outputs {
    return new SponsorProposalCall__Outputs(this);
  }
}

export class SponsorProposalCall__Inputs {
  _call: SponsorProposalCall;

  constructor(call: SponsorProposalCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SponsorProposalCall__Outputs {
  _call: SponsorProposalCall;

  constructor(call: SponsorProposalCall) {
    this._call = call;
  }
}

export class SubmitProposalCall extends ethereum.Call {
  get inputs(): SubmitProposalCall__Inputs {
    return new SubmitProposalCall__Inputs(this);
  }

  get outputs(): SubmitProposalCall__Outputs {
    return new SubmitProposalCall__Outputs(this);
  }
}

export class SubmitProposalCall__Inputs {
  _call: SubmitProposalCall;

  constructor(call: SubmitProposalCall) {
    this._call = call;
  }

  get proposalData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get expiration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get details(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class SubmitProposalCall__Outputs {
  _call: SubmitProposalCall;

  constructor(call: SubmitProposalCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SubmitVoteCall extends ethereum.Call {
  get inputs(): SubmitVoteCall__Inputs {
    return new SubmitVoteCall__Inputs(this);
  }

  get outputs(): SubmitVoteCall__Outputs {
    return new SubmitVoteCall__Outputs(this);
  }
}

export class SubmitVoteCall__Inputs {
  _call: SubmitVoteCall;

  constructor(call: SubmitVoteCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SubmitVoteCall__Outputs {
  _call: SubmitVoteCall;

  constructor(call: SubmitVoteCall) {
    this._call = call;
  }
}

export class SubmitVoteWithSigCall extends ethereum.Call {
  get inputs(): SubmitVoteWithSigCall__Inputs {
    return new SubmitVoteWithSigCall__Inputs(this);
  }

  get outputs(): SubmitVoteWithSigCall__Outputs {
    return new SubmitVoteWithSigCall__Outputs(this);
  }
}

export class SubmitVoteWithSigCall__Inputs {
  _call: SubmitVoteWithSigCall;

  constructor(call: SubmitVoteWithSigCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get signature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SubmitVoteWithSigCall__Outputs {
  _call: SubmitVoteWithSigCall;

  constructor(call: SubmitVoteWithSigCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
