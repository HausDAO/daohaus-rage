// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ModuleProxyCreation extends ethereum.Event {
  get params(): ModuleProxyCreation__Params {
    return new ModuleProxyCreation__Params(this);
  }
}

export class ModuleProxyCreation__Params {
  _event: ModuleProxyCreation;

  constructor(event: ModuleProxyCreation) {
    this._event = event;
  }

  get proxy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get masterCopy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SummonBaal extends ethereum.Event {
  get params(): SummonBaal__Params {
    return new SummonBaal__Params(this);
  }
}

export class SummonBaal__Params {
  _event: SummonBaal;

  constructor(event: SummonBaal) {
    this._event = event;
  }

  get baal(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get loot(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get safe(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class BaalSummoner extends ethereum.SmartContract {
  static bind(address: Address): BaalSummoner {
    return new BaalSummoner("BaalSummoner", address);
  }

  deployModule(
    masterCopy: Address,
    initializer: Bytes,
    saltNonce: BigInt
  ): Address {
    let result = super.call(
      "deployModule",
      "deployModule(address,bytes,uint256):(address)",
      [
        ethereum.Value.fromAddress(masterCopy),
        ethereum.Value.fromBytes(initializer),
        ethereum.Value.fromUnsignedBigInt(saltNonce)
      ]
    );

    return result[0].toAddress();
  }

  try_deployModule(
    masterCopy: Address,
    initializer: Bytes,
    saltNonce: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployModule",
      "deployModule(address,bytes,uint256):(address)",
      [
        ethereum.Value.fromAddress(masterCopy),
        ethereum.Value.fromBytes(initializer),
        ethereum.Value.fromUnsignedBigInt(saltNonce)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  encodeMultisend(_calls: Array<Bytes>, _target: Address): Bytes {
    let result = super.call(
      "encodeMultisend",
      "encodeMultisend(bytes[],address):(bytes)",
      [
        ethereum.Value.fromBytesArray(_calls),
        ethereum.Value.fromAddress(_target)
      ]
    );

    return result[0].toBytes();
  }

  try_encodeMultisend(
    _calls: Array<Bytes>,
    _target: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "encodeMultisend",
      "encodeMultisend(bytes[],address):(bytes)",
      [
        ethereum.Value.fromBytesArray(_calls),
        ethereum.Value.fromAddress(_target)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  gnosisFallbackLibrary(): Address {
    let result = super.call(
      "gnosisFallbackLibrary",
      "gnosisFallbackLibrary():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_gnosisFallbackLibrary(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "gnosisFallbackLibrary",
      "gnosisFallbackLibrary():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gnosisMultisendLibrary(): Address {
    let result = super.call(
      "gnosisMultisendLibrary",
      "gnosisMultisendLibrary():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_gnosisMultisendLibrary(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "gnosisMultisendLibrary",
      "gnosisMultisendLibrary():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gnosisSingleton(): Address {
    let result = super.call(
      "gnosisSingleton",
      "gnosisSingleton():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_gnosisSingleton(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "gnosisSingleton",
      "gnosisSingleton():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  summonBaal(_safe: Address): Address {
    let result = super.call("summonBaal", "summonBaal(address):(address)", [
      ethereum.Value.fromAddress(_safe)
    ]);

    return result[0].toAddress();
  }

  try_summonBaal(_safe: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("summonBaal", "summonBaal(address):(address)", [
      ethereum.Value.fromAddress(_safe)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  summonBaalAndSafe(
    initializationParams: Bytes,
    initializationActions: Array<Bytes>,
    _saltNonce: BigInt
  ): Address {
    let result = super.call(
      "summonBaalAndSafe",
      "summonBaalAndSafe(bytes,bytes[],uint256):(address)",
      [
        ethereum.Value.fromBytes(initializationParams),
        ethereum.Value.fromBytesArray(initializationActions),
        ethereum.Value.fromUnsignedBigInt(_saltNonce)
      ]
    );

    return result[0].toAddress();
  }

  try_summonBaalAndSafe(
    initializationParams: Bytes,
    initializationActions: Array<Bytes>,
    _saltNonce: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "summonBaalAndSafe",
      "summonBaalAndSafe(bytes,bytes[],uint256):(address)",
      [
        ethereum.Value.fromBytes(initializationParams),
        ethereum.Value.fromBytesArray(initializationActions),
        ethereum.Value.fromUnsignedBigInt(_saltNonce)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  template(): Address {
    let result = super.call("template", "template():(address)", []);

    return result[0].toAddress();
  }

  try_template(): ethereum.CallResult<Address> {
    let result = super.tryCall("template", "template():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _template(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _gnosisSingleton(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _gnosisFallbackLibrary(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _gnosisMultisendLibrary(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DeployModuleCall extends ethereum.Call {
  get inputs(): DeployModuleCall__Inputs {
    return new DeployModuleCall__Inputs(this);
  }

  get outputs(): DeployModuleCall__Outputs {
    return new DeployModuleCall__Outputs(this);
  }
}

export class DeployModuleCall__Inputs {
  _call: DeployModuleCall;

  constructor(call: DeployModuleCall) {
    this._call = call;
  }

  get masterCopy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get initializer(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get saltNonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DeployModuleCall__Outputs {
  _call: DeployModuleCall;

  constructor(call: DeployModuleCall) {
    this._call = call;
  }

  get proxy(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SummonBaalCall extends ethereum.Call {
  get inputs(): SummonBaalCall__Inputs {
    return new SummonBaalCall__Inputs(this);
  }

  get outputs(): SummonBaalCall__Outputs {
    return new SummonBaalCall__Outputs(this);
  }
}

export class SummonBaalCall__Inputs {
  _call: SummonBaalCall;

  constructor(call: SummonBaalCall) {
    this._call = call;
  }

  get _safe(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SummonBaalCall__Outputs {
  _call: SummonBaalCall;

  constructor(call: SummonBaalCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SummonBaalAndSafeCall extends ethereum.Call {
  get inputs(): SummonBaalAndSafeCall__Inputs {
    return new SummonBaalAndSafeCall__Inputs(this);
  }

  get outputs(): SummonBaalAndSafeCall__Outputs {
    return new SummonBaalAndSafeCall__Outputs(this);
  }
}

export class SummonBaalAndSafeCall__Inputs {
  _call: SummonBaalAndSafeCall;

  constructor(call: SummonBaalAndSafeCall) {
    this._call = call;
  }

  get initializationParams(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get initializationActions(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get _saltNonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SummonBaalAndSafeCall__Outputs {
  _call: SummonBaalAndSafeCall;

  constructor(call: SummonBaalAndSafeCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
